

# This file was *autogenerated* from the file main.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_10 = Integer(10); _sage_const_12 = Integer(12); _sage_const_1 = Integer(1); _sage_const_256 = Integer(256)
from sage.all import *
from Crypto.Util.number import bytes_to_long, getPrime

import random
import time
random.seed(time.time())

message = b'flag{REDACTED}' ## the flag has been removed
F = PolynomialRing(GF(_sage_const_2 ), x, names=('x',)); (x,) = F._first_ngens(1)

p, q = [F.irreducible_element(random.randint(_sage_const_2  ** _sage_const_10 , _sage_const_2  ** _sage_const_12 )) for _ in range(_sage_const_2 )]
R = F.quotient_ring(p * q, names=('y',)); (y,) = R._first_ngens(1)

n = sum(int(bit) * y ** (len(bin(bytes_to_long(message))[_sage_const_2 :]) - _sage_const_1  - i) for i, bit in enumerate(bin(bytes_to_long(message))[_sage_const_2 :]))

e = _sage_const_2  ** _sage_const_256 
c = n ** e 

print(e) ## to be given to the user
print(c) ## to be given to the user
print(p * q) ## to be given to the user


